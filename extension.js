// Generated by CoffeeScript 1.7.1
(function() {
  var message, search;

  message = function(msg) {};

  chrome.runtime.onMessage.addListener(function(request, sender, send_response) {
    if (sender.tab) {
      console.log('Sender', sender);
      console.log('message received on extension end', sender, request);
      console.log("From a content script tab url: " + sender.tab.url);
      chrome.storage.local.get('url', function(result) {
        return console.log("Get back from storage :" + result.url);
      });
      switch (request.type) {
        case 'upload':
          chrome.storage.sync.set({
            'url': sender.tab.url
          }, function() {
            return message("URL SAVED");
          });
          send_response({
            farewell: "goodbye"
          });
          console.log('do something');
      }
    }

    /*
     * test messages
     */
    return chrome.tabs.sendMessage(sender.tab.id, {
      type: 'test',
      data: {
        one: 'two'
      }
    }, function(response) {
      return console.log("Finished Search Results");
    });
  });


  /*
   * takes in a query string
   */

  search = function(query, port) {
    return chrome.storage.sync.get(null, function(result) {
      var search_results, tokens;
      console.log('Searching');
      tokens = query.split(/[^0-9A-Za-z]/);
      search_results = _.foldl(_.values(result), function(memo, item) {
        var matches;
        matches = _.intersection(result.keywords, result.tags, tokens).length;
        if (matches) {
          memo.push(result);
        }
        return memo;
      }, []);
      return port.postMessage({
        results: search_results
      });
    });
  };


  /*
   * Use chrome extension "ports" for search
   */

  chrome.runtime.onConnect.addListener(function(port) {
    console.assert(port.name === 'search');
    port.onMessage.addListener(function(msg) {
      return search(msg.query, port);
    });
    return port.onDisconnect.addListener(function(m) {
      return console.log('Search port disconnected.');
    });
  });

}).call(this);
